
local service = 748 ;--Set your Platoboost Id 
local secret = "4b00e49f-d434-4790-9901-7c6e4dc08de3"; --Set Your Platoboost Api key
local useNonce = true; 
local onMessage = function(message)  game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", { Text = message; }) end;


repeat task.wait(1) until game:IsLoaded() or game.Players.LocalPlayer;


local requestSending = false;
local fSetClipboard, fRequest, fStringChar, fToString, fStringSub, fOsTime, fMathRandom, fMathFloor, fGetHwid = setclipboard or toclipboard, request or http_request, string.char, tostring, string.sub, os.time, math.random, math.floor, gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local cachedLink, cachedTime = "", 0;
local HttpService = game:GetService("HttpService")

function lEncode(data)
    return HttpService:JSONEncode(data)
end
function lDecode(data)
    return HttpService:JSONDecode(data)
end
local function lDigest(input)
    local inputStr = tostring(input)
    
    
    local hash = {}
    for i = 1, #inputStr do
        table.insert(hash, string.byte(inputStr, i))
    end

    local hashHex = ""
    for _, byte in ipairs(hash) do
        hashHex = hashHex .. string.format("%02x", byte)
    end
    
    return hashHex
end
local host = "https://api.platoboost.com";
local hostResponse = fRequest({
    Url = host .. "/public/connectivity",
    Method = "GET"
});
if hostResponse.StatusCode ~= 200 or hostResponse.StatusCode ~= 429 then
    host = "https://api.platoboost.net";
end

function cacheLink()
    if cachedTime + (10*60) < fOsTime() then
        local response = fRequest({
            Url = host .. "/public/start",
            Method = "POST",
            Body = lEncode({
                service = service,
                identifier = lDigest(fGetHwid())
            }),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        });

        if response.StatusCode == 200 then
            local decoded = lDecode(response.Body);

            if decoded.success == true then
                cachedLink = decoded.data.url;
                cachedTime = fOsTime();
                return true, cachedLink;
            else
                onMessage(decoded.message);
                return false, decoded.message;
            end
        elseif response.StatusCode == 429 then
            local msg = "you are being rate limited, please wait 20 seconds and try again.";
            onMessage(msg);
            return false, msg;
        end

        local msg = "Failed to cache link.";
        onMessage(msg);
        return false, msg;
    else
        return true, cachedLink;
    end
end



cacheLink();

local generateNonce = function()
    local str = ""
    for _ = 1, 16 do
        str = str .. fStringChar(fMathFloor(fMathRandom() * (122 - 97 + 1)) + 97)
    end
    return str
end


for _ = 1, 5 do
    local oNonce = generateNonce();
    task.wait(0.2)
    if generateNonce() == oNonce then
        local msg = "platoboost nonce error.";
        onMessage(msg);
        error(msg);
    end
end

local copyLink = function()
    local success, link = cacheLink();
    
    if success then
        print("SetClipBoard")
        fSetClipboard(link);
    end
end

local redeemKey = function(key)
    local nonce = generateNonce();
    local endpoint = host .. "/public/redeem/" .. fToString(service);

    local body = {
        identifier = lDigest(fGetHwid()),
        key = key
    }

    if useNonce then
        body.nonce = nonce;
    end

    local response = fRequest({
        Url = endpoint,
        Method = "POST",
        Body = lEncode(body),
        Headers = {
            ["Content-Type"] = "application/json"
        }
    });

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    if decoded.data.hash == lDigest("true" .. "-" .. nonce .. "-" .. secret) then
                        return true;
                    else
                        onMessage("failed to verify integrity.");
                        return false;
                    end    
                else
                    return true;
                end
            else
                onMessage("key is invalid.");
                return false;
            end
        else
            if fStringSub(decoded.message, 1, 27) == "unique constraint violation" then
                onMessage("you already have an active key, please wait for it to expire before redeeming it.");
                return false;
            else
                onMessage(decoded.message);
                return false;
            end
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.");
        return false;
    else
        onMessage("server returned an invalid status code, please try again later.");
        return false; 
    end
end


local verifyKey = function(key)
    if requestSending == true then
        onMessage("a request is already being sent, please slow down.");
        return false;
    else
        requestSending = true;
    end

    local nonce = generateNonce();
    local endpoint = host .. "/public/whitelist/" .. fToString(service) .. "?identifier=" .. lDigest(fGetHwid()) .. "&key=" .. key;

    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce;
    end
    local response = fRequest({
        Url = endpoint,
        Method = "GET",
    });

    requestSending = false;

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success == true then
            if decoded.data.valid == true then
                if useNonce then
                    return true;
                else
                    return true;
                end
            else
                if fStringSub(key, 1, 4) == "FREE_" then
                    return redeemKey(key);
                else
                    onMessage("key is invalid.");
                    return false;
                end
            end
        else
            onMessage(decoded.message);
            return false;
        end
    elseif response.StatusCode == 429 then
        onMessage("you are being rate limited, please wait 20 seconds and try again.");
        return false;
    else
        onMessage("server returned an invalid status code, please try again later.");
        return false;
    end
end


local getFlag = function(name)
    local nonce = generateNonce();
    local endpoint = host .. "/public/flag/" .. fToString(service) .. "?name=" .. name;

    if useNonce then
        endpoint = endpoint .. "&nonce=" .. nonce;
    end

    local response = fRequest({
        Url = endpoint,
        Method = "GET",
    });

    if response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success == true then
            if useNonce then
                if decoded.data.hash == lDigest(fToString(decoded.data.value) .. "-" .. nonce .. "-" .. secret) then
                    return decoded.data.value;
                else
                    onMessage("failed to verify integrity.");
                    return nil;
                end
            else
                return decoded.data.value;
            end
        else
            onMessage(decoded.message);
            return nil;
        end
    else
        return nil;
    end
end

task.spawn(function()
    -- Create the ScreenGui and main Frame
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TextBox = Instance.new("TextBox")
    local GetKeyButton = Instance.new("TextButton")
    local VerifyKeyButton = Instance.new("TextButton")
    local UICorner = Instance.new("UICorner")
    local TextBoxCorner = Instance.new("UICorner")
    local GetKeyButtonCorner = Instance.new("UICorner")
    local VerifyKeyButtonCorner = Instance.new("UICorner")

    -- Parent the ScreenGui to Player's GUI
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- MainFrame Properties
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    MainFrame.BackgroundTransparency = 0.2
    MainFrame.BorderSizePixel = 0
    MainFrame.Size = UDim2.new(0, 300, 0, 200)
    MainFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.ClipsDescendants = true

    -- Add rounded corners to MainFrame
    UICorner.Parent = MainFrame
    UICorner.CornerRadius = UDim.new(0, 15)

    -- TextBox Properties
    TextBox.Parent = MainFrame
    TextBox.PlaceholderText = "Enter Key"
    TextBox.Size = UDim2.new(0.9, 0, 0.2, 0)
    TextBox.Position = UDim2.new(0.05, 0, 0.1, 0)
    TextBox.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextBox.Font = Enum.Font.SourceSans
    TextBox.TextSize = 18
    TextBox.Text = ""
    TextBoxCorner.Parent = TextBox
    TextBoxCorner.CornerRadius = UDim.new(0, 10)

    -- Get Key Button Properties
    GetKeyButton.Parent = MainFrame
    GetKeyButton.Text = "Get Key"
    GetKeyButton.Size = UDim2.new(0.4, 0, 0.2, 0)
    GetKeyButton.Position = UDim2.new(0.05, 0, 0.4, 0)
    GetKeyButton.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
    GetKeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    GetKeyButton.Font = Enum.Font.SourceSans
    GetKeyButton.TextSize = 18
    GetKeyButtonCorner.Parent = GetKeyButton
    GetKeyButtonCorner.CornerRadius = UDim.new(0, 10)

    -- Verify Key Button Properties
    VerifyKeyButton.Parent = MainFrame
    VerifyKeyButton.Text = "Verify Key"
    VerifyKeyButton.Size = UDim2.new(0.4, 0, 0.2, 0)
    VerifyKeyButton.Position = UDim2.new(0.55, 0, 0.4, 0)
    VerifyKeyButton.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
    VerifyKeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    VerifyKeyButton.Font = Enum.Font.SourceSans
    VerifyKeyButton.TextSize = 18
    VerifyKeyButtonCorner.Parent = VerifyKeyButton
    VerifyKeyButtonCorner.CornerRadius = UDim.new(0, 10)

    -- Dragging functionality for Mobile and Desktop
    local dragging = false
    local dragInput, dragStart, startPos
    local UIS = game:GetService("UserInputService")

    -- Function to update frame position during drag
    local function update(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    -- Input began listener to start dragging
    MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    -- Input changed listener to update the frame position while dragging
    MainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    -- Update the frame position when dragging
    UIS.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- Button Logic
    GetKeyButton.MouseButton1Down:Connect(function()
        copyLink()
        print("Key copied to clipboard!")
    end)

    VerifyKeyButton.MouseButton1Down:Connect(function()
        if TextBox.Text ~= "" then
            local isValid = verifyKey(TextBox.Text)
            if isValid then
                print("Key verified! Loading script...")
                loadstring(game:HttpGet("https://raw.githubusercontent.com/brion312/gui/refs/heads/master/rich", true))()
                if isValid then
                ScreenGui.Destroy()
            else
                print("Invalid key. Please try again.")
            end
        else
            print("Please enter a key first.")
        end
    end
end)
    
    Exit.MouseButton1Down:Connect(function()
        if ScreenGui then
            ScreenGui:Destroy()
        end
    end)
    
    
    minimize.MouseButton1Down:Connect(function()
        if ScreenGui then
            ScreenGui.Enabled = false
        end
    end)
    
